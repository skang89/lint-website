{"version":3,"sources":["components/Views/Home/Home.jsx","components/App/App.jsx","serviceWorker.js","index.jsx"],"names":["Home","sliderSettings","autoplay","autoplaySpeed","arrows","centerMode","className","draggable","fade","infinite","speed","pauseOnHover","slidesToShow","slidesToScroll","swipe","touchMove","src","alt","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAoEeA,G,MA7DF,WACX,IAAMC,EAAiB,CACrBC,UAAU,EACVC,cAAe,KACfC,QAAQ,EACRC,YAAY,EACZC,UAAW,YACXC,WAAW,EACXC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,cAAc,EACdC,aAAc,EACdC,eAAgB,EAChBC,OAAO,EACPC,WAAW,GAGb,OACE,yBAAKT,UAAU,cACb,yBAAKU,IAAI,4BAA4BC,IAAI,iBAAiBX,UAAU,YACpE,kBAAC,IAAWL,EACV,yBAAKK,UAAU,mBACb,yBACEU,IAAI,8BACJC,IAAI,cACJX,UAAU,oBAGd,yBAAKA,UAAU,mBACb,yBAAKU,IAAI,wBAAwBC,IAAI,QAAQX,UAAU,oBAEzD,yBAAKA,UAAU,mBACb,yBACEU,IAAI,4BACJC,IAAI,YACJX,UAAU,oBAGd,yBAAKA,UAAU,mBACb,yBAAKU,IAAI,wBAAwBC,IAAI,QAAQX,UAAU,oBAEzD,yBAAKA,UAAU,mBACb,yBAAKU,IAAI,yBAAyBC,IAAI,SAASX,UAAU,oBAE3D,yBAAKA,UAAU,mBACb,yBAAKU,IAAI,0BAA0BC,IAAI,UAAUX,UAAU,qBAG/D,yBAAKA,UAAU,WACb,0CACA,8CAEE,6BAFF,mBCtCOY,G,MAVH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,QCFrBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,gBD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.daa16c2d.chunk.js","sourcesContent":["// import react packages\r\nimport React from \"react\";\r\nimport Slider from \"react-slick\";\r\n\r\n// import styles\r\nimport \"./Home.scss\";\r\n\r\nconst Home = () => {\r\n  const sliderSettings = {\r\n    autoplay: true,\r\n    autoplaySpeed: 2500,\r\n    arrows: false,\r\n    centerMode: true,\r\n    className: \"lc-slider\",\r\n    draggable: false,\r\n    fade: true,\r\n    infinite: true,\r\n    speed: 500,\r\n    pauseOnHover: false,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n    swipe: true,\r\n    touchMove: true,\r\n  };\r\n\r\n  return (\r\n    <div className=\"lc-wrapper\">\r\n      <img src=\"/assets/img/LINT_Logo.svg\" alt=\"Lint Cosmetics\" className=\"lc-logo\" />\r\n      <Slider {...sliderSettings}>\r\n        <div className=\"lc-slider__item\">\r\n          <img\r\n            src=\"/assets/img/So-Blushing.jpg\"\r\n            alt=\"So Blushing\"\r\n            className=\"lc-slider__img\"\r\n          />\r\n        </div>\r\n        <div className=\"lc-slider__item\">\r\n          <img src=\"/assets/img/Danny.jpg\" alt=\"Danny\" className=\"lc-slider__img\" />\r\n        </div>\r\n        <div className=\"lc-slider__item\">\r\n          <img\r\n            src=\"/assets/img/Malowanie.jpg\"\r\n            alt=\"Malowanie\"\r\n            className=\"lc-slider__img\"\r\n          />\r\n        </div>\r\n        <div className=\"lc-slider__item\">\r\n          <img src=\"/assets/img/David.jpg\" alt=\"David\" className=\"lc-slider__img\" />\r\n        </div>\r\n        <div className=\"lc-slider__item\">\r\n          <img src=\"/assets/img/Hialex.jpg\" alt=\"Hialex\" className=\"lc-slider__img\" />\r\n        </div>\r\n        <div className=\"lc-slider__item\">\r\n          <img src=\"/assets/img/Louther.jpg\" alt=\"Louther\" className=\"lc-slider__img\" />\r\n        </div>\r\n      </Slider>\r\n      <div className=\"lc-text\">\r\n        <p>August 2020</p>\r\n        <p>\r\n          Pro Artist Tools\r\n          <br />\r\n          Coming Soon\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","// import react packages\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\n// import components\r\nimport Home from \"../Views/Home/Home\";\r\n\r\n// import styles\r\nimport \"./App.scss\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import react packages\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n// import react components\r\nimport App from \"./components/App/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"lintWebsite\"));\r\n\r\nserviceWorker.unregister();\r\n// serviceWorker.register();\r\n"],"sourceRoot":""}